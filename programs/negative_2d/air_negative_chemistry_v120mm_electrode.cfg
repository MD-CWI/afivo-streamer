###############################################
############      Configuration file        ###############
###############################################

# Whether cylindrical coordinates are used (only in 2D):
cylindrical = T

# Whether the domain is periodic (per dimension):
 periodic = F F

# The number of grid cells per coordinate in a box:
box_size = 8

# The size of the coarse grid:
coarse_grid_size = 64 128

# Add electrode with the following settings
use_electrode = T

# Ensure grid spacing around electrode is less than this value:
refine_electrode_dx =  2.0000E-05

# Whether the electrode is grounded or at the applied voltage:
field_electrode_grounded = F

# Electrode relative start position (for standard rod electrode):
field_rod_r0 =  0.0000E+00 1.0000E+00

# Electrode relative end position (for standard rod electrode):
field_rod_r1 =  0.0000E+00 0.8500E+00

# Electrode radius (in m, for standard rod electrode):
field_rod_radius =  1.5000E-03

# Directory where the output should be written:
#output%name = output/negative_streamer/domain_120mm/electrode/air/

output%name = /export/scratch2/baohong/afivo-streamer/negative_2d/output/negative_streamer/domain_120mm/electrode/air/

# The length of the domain (m):
domain_len =  60.0000E-03 120.0000E-03

# Streamer length at which the simulation will end (m) :
end_streamer_length =  110.0000E-03

# The desired endtime (s) of the simulation:
end_time =  200.0000E-09

# Whether the length of the streamer is used to end the simulation:
use_end_streamer_length = T

# Whether end_time is used to end the simulation:
use_end_time = T

# Electron density threshold (1/m3, will be scaled by N), tipically around 1.0000E+18, should be smaller than 4e16 when consider fading out:
output%density_threshold =  1.0000E+16

# The timestep for writing output (s):
output%dt=  2.0000E-10

# The maximum timestep (s):
dt_max =  1.0000E-10

# The minimum timestep (s):
dt_min =  1.0000E-14

[gas]
    # Gas components:
    components=N2 O2

    # Fraction of O2, used for photoionization:
    fractions=0.8 0.2

    # The gas pressure (bar), used for photoionization:
    pressure =  1.0000E+00

# The background ion and electron density (1/m3):
background_density = 1.0000E+09

# The applied electric field (V/m) (vertical):
field_amplitude = 0.9000E+06

# Type of seed: neutral (0), ions (1) or electrons (-1):
#seed_charge_type = 0

# Initial density of the seed (1/m3):
#seed_density =  5.0000E+19

# The relative start position of the initial seed:
#seed_rel_r0 =  0.0000E+00 0.8500E+00

# The relative end position of the initial seed:
#seed_rel_r1 =  0.0000E+00 0.8500E+00

# Seed width (m):
#seed_width =  1.5000E-03

# Fall-off type for seed (sigmoid, gaussian, smoothstep, step, laser), "default=smoothstep:
#seed_falloff = 'smoothstep'

# File containing applied electric field (V/m) versus time:
#field_table = 'field_table.txt'

[field_decay]
    # Whether field_decay versus length is enabled:
    enabled = F

    # Decay type for applied electric field (constant, exponential, linear_across_zero, linear_over_zero, step), "default=exponential:
    decay_profile = 'exponential'

    # Initial electric field before any decay (V/m):
    initial_field = 2.2000E+06

    # Minimal electric field (V/m):
    min_field = 1.0000E+06

    # Decay distance (m):
    decay_distance = 5.0000E-03

    # Decay slope (V/m2):
    decay_slope = -0.4000E+08

    # Decay starts from this z-coordinate (m):
    decay_start_z = 105.0000E-03

    # Detection density (1/m3):
    detection_density = 1.0000E+16

# Type for boundary condition to use (homogeneous, ...):
field_bc_type = 'homogeneous'

# Boundary condition for the plasma species (neumann_zero, dirichlet_zero), "default=neumann_zero:
species_boundary_condition = 'neumann_zero'

[input_data]
    # List of ion mobilities (m^2/Vs):
#    ion_mobilities = 1.8000E-04 2.5000E-04

    # Secondary electron emission yield for positive ions:
#    ion_se_yield =  0.1000E+01

    # List of ions that are considered mobile:
#    mobile_ions = N2_plus O2_plus

[fixes]
    # Disable diffusion parallel to fields above this threshold (V/m):
    diffusion_field_limit =  1.0000E+100

    # Avoid dielectric relaxation time step constraint by limiting flux:
    drt_limit_flux = F

    # Limit velocities to this value (m/s):
    max_velocity = -1.0000E+00

    # Use source factor to prevent unphysical effects due to diffusion:
    source_factor = T

    # Minimal density for including electron sources:
    source_min_density = -1.0000E+10

[photoi]
    # Whether photoionization is enabled:
    enabled = T
    
    # Which photoionization method to use (helmholtz, montecarlo):
    method = 'helmholtz'
   
    # Photoionization efficiency factor, typically around 5.0000E-02:
    eta =  5.0000E-02

    # Update photoionization every N time step:
    per_steps = 5
    
    # Photoionization quenching pressure (bar):
    quenching_pressure = 4.0000E-02
      
    # How to compute the photoi. source (Zheleznyak, from_species):
    source_type = 'Zheleznyak'

[photoi_helmh]
    # Can be Luque (default), Bourdon-2, Bourdon-3 or custom:
     author = 'Bourdon-3'

[cross]
    # Use this many points for cross-section data:
    npoints = 500

    # Integrate up to this r value:
    rmax =  10.0000E-03

    # Write integral over cross-section data output:
    write = F

[lineout]
    # Use this many points for lineout data:
    npoints = 500

    # Relative position of line maximum coordinate:
    rmax =  1.0000E+00  1.0000E+00

    # Relative position of line minimum coordinate:
    rmin =  0.0000E+00  0.0000E+00

    # Write output along a line:
    write = F

[plane]
    # Use this many pixels for plane data:
    npixels = 64 64

    # Relative position of plane maximum coordinate:
    rmax =  1.0000E+00  1.0000E+00

    # Relative position of plane minimum coordinate:
    rmin =  0.0000E+00  0.0000E+00

    # Write uniform output in a plane:
    write = F

[datfile]
    # Write binary output files every N outputs:
    per_outputs = 1

    # Write binary output files (to resume later):
    write = F

# Allow derefinement if the curvature in phi is smaller than this value:
derefine_cphi =  1.0000E+99

# Only derefine if grid spacing if smaller than this value:
derefine_dx =  1.0000E-04

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  1.2000E+00

# The refinement buffer width in cells (around flagged cells):
refine_buffer_width = 4

# Refine if the curvature in phi is larger than this value:
refine_cphi =  1.0000E+99

# Refine until dx is smaller than this factor times the seed width:
refine_init_fac =  2.5000E-01

# Refine around initial conditions up to this time:
refine_init_time =  1.0000E-08

# The grid spacing will always be smaller than this value:
refine_max_dx =  1.0000E-03

# The grid spacing will always be larger than this value:
refine_min_dx =  2.0000E-06	

# The number of steps after which the mesh is updated:
refine_per_steps = 2

# Number of V-cycles to perform per time step:
multigrid_num_vcycles = 2

# Input file with transport (and reaction) data:
input_data%file = ../../transport_data/air_phelps_chemistry_small_v0_300points.txt

# Use old style transport data (alpha, eta, mu, D vs V/m):
input_data%old_style= F

