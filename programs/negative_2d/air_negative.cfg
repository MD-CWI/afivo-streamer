###############################################
############      Configuration file        ###############
###############################################

# Whether cylindrical coordinates are used (only in 2D):
cylindrical = T

# The number of grid cells per coordinate in a box:
box_size = 8

# Whether the domain is periodic (per dimension):
 periodic = F F

# If set, restart simulation from a previous .dat file:
restart_from_file = 'UNDEFINED'

# Directory where the output should be written:
output%name = output/test

# The length of the domain (m):
domain_len =  20.0000E-03 40.0000E-03

# Streamer length at which the simulation will end.:
end_streamer_length =  37.4000E-03

# The desired endtime (s) of the simulation:
end_time =  100.0000E-09

# Whether the length of the streamer is used to end the simulation:
use_end_streamer_length = T

# Whether end_time is used to end the simulation:
use_end_time = t

# The timestep for writing output (s):
output%dt=  5.0000E-10

# The maximum timestep (s):
dt_max =  1.0000E-10

# The minimum timestep (s):
dt_min =  1.0000E-14

[gas]
    # Gas components:
    components=N2 O2

    # Fraction of O2, used for photoionization:
    fractions=0.8 0.2

    # The gas pressure (bar), used for photoionization:
    pressure =  1.0000E+00

# The background ion and electron density (1/m3):
background_density = 0.0000E+13

# Type of seed: neutral (0), ions (1) or electrons (-1):
seed_charge_type = 0

# Initial density of the seed (1/m3):
seed_density =  7.5000E+18

# The relative start position of the initial seed:
seed_rel_r0 =  0.0000E+00 1.0000E+00

# The relative end position of the initial seed:
seed_rel_r1 =  0.0000E+00 0.9200E+00

# Seed width (m):
seed_width =  4.0000E-04

# Fall-off type for seed (sigmoid, gaussian, smoothstep, step, laser), "default=smoothstep:
seed_falloff = 'smoothstep'

# File containing applied electric field (V/m) versus time:
#field_table = 'field_table.txt'

# The applied electric field (V/m) (vertical):
field_amplitude = 2.5000E+06

# Type of boundary condition to use (homogeneous, ...):
field_bc_type = 'homogeneous'

# Boundary condition for the plasma species (neumann_zero, dirichlet_zero)ï¼Œ"default=neumann_zero:
species_boundary_condition = 'dirichlet_zero'

[input_data]
    # List of ion mobilities (m^2/Vs):
    ion_mobilities =2.0000E-04

    # Secondary electron emission yield for positive ions:
    ion_se_yield =  0.1000E+01

    # List of ions that are considered mobile:
    mobile_ions =M_plus

[fixes]
    # Disable diffusion parallel to fields above this threshold (V/m):
    diffusion_field_limit =  1.0000E+100

    # Avoid dielectric relaxation time step constraint by limiting flux:
    drt_limit_flux = F

    # Limit velocities to this value (m/s):
    max_velocity = -1.0000E+00

    # Use source factor to prevent unphysical effects due to diffusion:
    source_factor = T

    # Minimal density for including electron sources:
    source_min_density = -1.0000E+10

[photoi]
    # Whether photoionization is enabled:
    enabled = T
    
    # Which photoionization method to use (helmholtz, montecarlo):
    method = 'helmholtz'
   
    # Photoionization efficiency factor, typically around 5.0000E-02:
    eta =  7.5000E-02

    # Update photoionization every N time step:
    per_steps = 1
    
    # Photoionization quenching pressure (bar):
    quenching_pressure = 4.0000E-02
      
    # How to compute the photoi. source (Zheleznyak, from_species):
    source_type = 'Zheleznyak'

[photoi_helmh]
    # Can be Luque (default), Bourdon-2, Bourdon-3 or custom:
     author = 'Bourdon-3'

    # Weights corresponding to the lambdas; unit 1/(m bar)^2:
    coeffs =  1117314.935  28692377.5  2748842283

    # Lambdas to use in Helmholtz eq; unit 1/(m bar):
    lambdas =  4147.85   10950.93  66755.67

[photoi_mc]
     # At which grid spacing photons are absorbed compared to their mean distance:
    absorp_fac =  2.5000E-01

    # Whether a constant grid spacing is used for photoionization:
    const_dx = T

    # Minimum grid spacing for photoionization:
    min_dx =  1.0000E-09

    # Maximum number of discrete photons to use:
    num_photons = 100000

    # Whether physical photons are used:
    physical_photons = T

[lineout]
    # Use this many points for lineout data:
    npoints = 500

    # Relative position of line maximum coordinate:
    rmax =  1.0000E+00  1.0000E+00

    # Relative position of line minimum coordinate:
    rmin =  0.0000E+00  0.0000E+00

    # Write output along a line:
    write = F

[plane]
    # Use this many pixels for plane data:
    npixels = 64 64

    # Relative position of plane maximum coordinate:
    rmax =  1.0000E+00  1.0000E+00

    # Relative position of plane minimum coordinate:
    rmin =  0.0000E+00  0.0000E+00

    # Write uniform output in a plane:
    write = F

[datfile]
    # Write binary output files every N outputs:
    per_outputs = 1

    # Write binary output files (to resume later):
    write = F

# Allow derefinement if the curvature in phi is smaller than this value:
derefine_cphi =  1.0000E+99

# Only derefine if grid spacing if smaller than this value:
derefine_dx =  1.0000E-04

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  1.0000E+00

# The refinement buffer width in cells (around flagged cells):
refine_buffer_width = 4

# Refine if the curvature in phi is larger than this value:
refine_cphi =  1.0000E+99

# Refine until dx is smaller than this factor times the seed width:
refine_init_fac =  2.5000E-01

# Refine around initial conditions up to this time:
refine_init_time =  1.0000E-08

# The grid spacing will always be smaller than this value:
refine_max_dx =  1.0000E-03

# The grid spacing will always be larger than this value:
refine_min_dx =  1.0000E-05

# The number of steps after which the mesh is updated:
refine_per_steps = 2

# Number of V-cycles to perform per time step:
multigrid_num_vcycles = 2

# Input file with transport data:
input_data%file = ../../transport_data/td_air_siglo_swarm.txt
input_data%old_style= T


