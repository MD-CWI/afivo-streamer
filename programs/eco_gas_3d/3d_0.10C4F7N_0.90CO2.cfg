###############################################
############       Configuration file        ###############
###############################################

# The number of grid cells per coordinate in a box:
box_size = 8

# The size of the coarse grid:
coarse_grid_size = 16 16 32

# Add electrode with the following settings
use_electrode = T

# Ensure grid spacing around electrode is less than this value:
refine_electrode_dx =  5.0000E-05

# Whether the electrode is grounded or at the applied voltage:
field_electrode_grounded = F

# Electrode relative start position (for standard rod electrode):
field_rod_r1 =  0.5000E+00  0.5000E+00  1.0000E+00

# Electrode relative end position (for standard rod electrode):
field_rod_r0 =  0.5000E+00  0.5000E+00  0.8000E+00

# Electrode radius (in m, for standard rod electrode):
field_rod_radius =  0.1000E-03

# Directory where the output should be written:
output%name = /export/scratch2/baohong/eco_gas/0.10C4F7N_0.90CO2/

# The length of the domain (m):
domain_len =  2.5000E-03  2.5000E-03  5.0000E-03

# Streamer length at which the simulation will end (m) :
end_streamer_length =  3.5000E-03

# The desired endtime (s) of the simulation:
end_time =  15.0000E-09

# Whether the length of the streamer is used to end the simulation:
use_end_streamer_length = T

# The timestep for writing output (s):
output%dt =  5.0000E-10

# The maximum timestep (s):
dt_max =  1.0000E-10

# The minimum timestep (s):
dt_min =  1.0000E-16

# Small density for the chemistry time step:
dt_chemistry_nmin =  1.0000E+15

[gas]
    # Gas components:
    components= C4F7N CO2

    # Fraction of O2, used for photoionization:
    fractions= 0.1 0.9

    # The gas pressure (bar), used for photoionization:
    pressure = 1.0000E+00

# The background ion and electron density (1/m3):
background_density = 1.0000E+11

# Names of custom species for the background density:
background_species = 'e CO2_plus'

# The applied electric field (V/m) (vertical):
field_given_by= field -4.0000E+06

# Type of seed: neutral (0), ions (1) or electrons (-1):
seed_charge_type = 0

# Initial density of the seed (1/m3):
seed_density =  1.0000E+15

# Names of custom species for the first seed:
seed1_species = 'e CO2_plus'

# The relative start position of the initial seed:
seed_rel_r0 =  0.5000E+00 0.5000E+00 0.7800E+00

# The relative end position of the initial seed:
seed_rel_r1 =  0.5000E+00 0.5000E+00 0.7800E+00

# Seed width (m):
seed_width =  0.1000E-03

# Fall-off type for seed (sigmoid, gaussian, smoothstep, step, laser), "default=smoothstep:
seed_falloff = 'gaussian'

# Type for boundary condition to use (homogeneous, ...):
field_bc_type = 'homogeneous'

# Boundary condition for the plasma species (neumann_zero, dirichlet_zero), "default=neumann_zero:
species_boundary_condition = 'neumann_zero'

[fixes]
    # Enable flux limiting, but prevent field from exceeding this value:
    drt_max_field =  2.0000E+06

    # Use source factor to prevent unphysical effects due to diffusion:
    source_factor = 'original_flux'

    # Whether to write the source factor to the output:
    write_source_factor = T

[input_data]
    # List of ion mobilities (m^2/Vs):
    ion_mobilities = '2.2e-4 2.2e-4 2.2e-4 2.2e-4'

    # List of ions that are considered mobile:
    mobile_ions = 'C4F7N_plus CO2_plus C4F7N_min O_min'
    
[photoi]
    # Whether photoionization is enabled:
    enabled = F
    
    # Which photoionization method to use (helmholtz, montecarlo):
    method = 'helmholtz'
   
    # Photoionization efficiency factor, typically around 5.0000E-02:
    eta =  7.5000E-02

    # Update photoionization every N time step:
    per_steps = 1
    
    # Photoionization quenching pressure (bar):
    quenching_pressure = 4.0000E-02
      
    # How to compute the photoi. source (Zheleznyak, from_species):
    source_type = 'Zheleznyak'

[photoi_helmh]
    # Can be Luque (default), Bourdon-2, Bourdon-3 or custom:
    author = 'Bourdon-3'

# Only derefine if grid spacing if smaller than this value:
derefine_dx =  1.0000E-04

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  1.0000E+00

# The grid spacing will always be smaller than this value:
refine_max_dx =  1.0000E-03

# The grid spacing will always be larger than this value:
refine_min_dx =  1.0000E-06	

# Use effective alpha (minus attachment) for refinement:
refine_use_alpha_effective = T

# Input file with transport (and reaction) data:
input_data%file = ../../transport_data/eco_gas/3d_0.10C4F7N_0.90CO2_chemistry.txt

# Use old style transport data (alpha, eta, mu, D vs V/m):
input_data%old_style= F

[table_data]
    # Input interpolation method (linear, cubic_spline):
    input_interpolation = 'linear'

    # Maximal field (in Td) for the rate coeff. lookup table:
    max_townsend =  2.0000E+03

    # Minimal field (in Td) for the rate coeff. lookup table:
    min_townsend =  0.0000E+00

    # Size of the lookup table for reaction rates:
    size = 2000

    # x-spacing for lookup table (linear, quadratic):
    xspacing = 'quadratic'
