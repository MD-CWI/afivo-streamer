 ##############################################
 ###          Configuration file            ###
 ##############################################

 # The desired endtime in seconds of the simulation:
 end_time = 5e-6

 # The number of grid cells per coordinate in a box:
 box_size = 8

 # The length of the (square) domain:
domain_len = 13.3e-3 13.3e-3 

 # Whether the domain is periodic (per dimension):
 periodic = F F

[gas]
    # Gas component names:
    components = 'N2' 'O2'

    # Whether the gas dynamics are simulated:
    dynamics = T
    # Joule heating efficiency (between 0.0 and 1.0):
    heating_efficiency =  1.0000
    #slow_heating_efficiency =  0.0000E+00
    #tau_vt = 2e-5

    # Gas component fractions:
    fractions =  8.0000E-01  2.0000E-01

    # Gas mean molecular weight (kg), for gas dynamics:
    molecular_weight =  4.7824E-26

    # The gas pressure (bar):
    pressure =  1.0
    
    # The gas temperature (Kelvin):
    temperature =  3.0000E+02

 # The gas pressure in bar (used for photoionization):
 gas%pressure = 0.1000E+01

# How the electric field or voltage is specified:
field_given_by = 'voltage 2.4e4'

 # The background ion and electron density in 1/m^3:
background_density =  1.7700E+09

[datfile]
    # Write binary output files every N outputs:
    per_outputs = 50

    # Write binary output files (to resume later):
    write = T

# Whether to compute the deposited power density:
compute_power_density = T

user_current_control = T
user_current = 0.1
user_relaxation_time = 5e-9
# Initial density of the seed:
seed_density = 1e19

# Type of seed: neutral (0), ions (1) or electrons (-1):
seed_charge_type = 0

# Fall-off type for seed (sigmoid, gaussian, smoothstep, step, laser):
seed_falloff = gaussian

# The relative start position of the initial seed:
seed_rel_r0 = 0.5 0.0

# The relative end position of the initial seed:
seed_rel_r1 = 0.5 1.0

# Seed width (m):
seed_width = 1.5e-3

[input_data]
    # Input file with transport (and reaction) data:
    #file = '../../transport_data/varyO2_transportData/BG_20O2.txt'
    file = '../../transport_data/air_chemistry_v3.txt'

    # List of ion mobilities (m^2/Vs) at 1 bar, 300 K:
    ion_mobilities =  2.2000E-04  2.2000E-04  2.2000E-04  2.2000E-04  2.2000E-04  2.2000E-04  2.2000E-04

    # List of ions that are considered mobile:
    mobile_ions = 'N2_plus' 'O2_plus' 'N4_plus' 'O4_plus' 'O2_min' 'O_min' 'O3_min'

    # Use old style transport data (alpha, eta, mu, D vs V/m):
    old_style = F
    
[table_data]
    # Input interpolation method (linear, cubic_spline):
    #input_interpolation = 'linear'
    input_interpolation = 'linear'

    # Maximal field (in Td) for the rate coeff. lookup table:
    max_townsend =  1.0000E+03

    # Minimal field (in Td) for the rate coeff. lookup table:
    min_townsend =  1.0000E+00

    # Size of the lookup table for reaction rates:
    size = 1000

    # x-spacing for lookup table (linear, quadratic):
    #xspacing = 'linear'
    xspacing = 'quadratic'

# Memory limit (GB):
memory_limit_GB =  16.0000E+00

[output]
    # Output the conductivity of the plasma:
    conductivity = T

    # The timestep for writing output (s):
    dt =  5e-9

    # To reduce output when the voltage is off:
    dt_factor_pulse_off = 100

    # Show the electron energy in eV from the local field approximation:
    electron_energy = F

    # Name for the output files (e.g. output/my_sim):
    name = ./retest/channel_2d

    # Print status every this many seconds:
    status_delay =  1.0000E+01

# Whether the domain is periodic (per dimension):
periodic = F F

[photoi]
    # Whether photoionization is enabled:
    enabled = T

    # Whether photoionization is enabled in gas:
    enabled_ingas = T

    # Photoionization efficiency factor, typically around 0.05-0.1:
    eta =  5.0000E-02

    # Which photoionization method to use (helmholtz, montecarlo):
    method = 'helmholtz'

    # Update photoionization every N time step:
    per_steps = 4

    # How to compute the photoi. source (Zheleznyak, from_species):
    source_type = 'Zheleznyak'

[photoi_helmh]
    # Can be Luque (default), Bourdon-2, Bourdon-3 or custom:
    author = 'Bourdon-3'

    # Maximum residual relative to max(|rhs|):
    max_rel_residual =  1.0000E-02

# Density prolongation method (limit, linear, linear_cons, sparse):
prolong_density = 'limit'

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  1.0000E+00

# The refinement buffer width in cells (around flagged cells):
refine_buffer_width = 4

# Refine if the curvature in phi is larger than this value:
refine_cphi =  1.0000E+99

# Refine until dx is smaller than this factor times the seed width:
refine_init_fac =  2.5000E-01

# Refine around initial conditions up to this time:
refine_init_time =  1.0000E-08

# The grid spacing will always be smaller than this value:
refine_max_dx =  4.0000E-03

# Minimum electron density for adding grid refinement:
refine_min_dens = -1.0000E+99

# The grid spacing will always be larger than this value:
refine_min_dx =  1.0000E-07

# Seed for random numbers; if all zero, generate randomly:
rng_seed = 8123 91234 12399 293434

# Write silo output:
silo_write = T

# Boundary condition for the plasma species:
species_boundary_condition = 'neumann_zero'

