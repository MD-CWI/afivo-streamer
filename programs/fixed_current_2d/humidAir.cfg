# The background ion and electron density (2/m3):
#background_density =  1.5625e+08
background_density = 0.0

# The size of the coarse grid:
# coarse_grid_size = 256 256

# Whether cylindrical coordinates are used (only in 2D):
cylindrical = T

# The length of the domain (m):
domain_len =  20.00E-03 20.00E-03

# The maximum timestep (s):
dt_max =  1.0000E-10


field_rise_time = 10e-9
field_num_pulses=2
field_pulse_period=100e-9
field_pulse_width=20e-9

seed_charge_type = 0
seed_density = 1e16

seed_falloff = gaussian
seed_rel_r0 = 0.0 9.20e-1
seed_rel_r1 = 0.0 9.20e-1
seed_width = 6e-05

# The desired endtime (s) of the simulation:
end_time =  100.0E-09

field_given_by = voltage 36e3

# Whether the electrode is grounded or at the applied voltage:
field_electrode_grounded = F

# Type of electrode:
field_electrode_type = 'rod'

# First electrode relative position:
field_rod_r0 =  0.0000E+00  9.4000E-01

# Second electrode relative position:
field_rod_r1 =  0.0000E+00  1.0000E+00

# Third electrode relative position:
field_rod_r2 =  0.0000E+00  1.0000E+00

# Electrode radius (in m, for standard rod electrode):
field_rod_radius =  8.0000E-05

# Electrode tip radius (for conical electrode):
field_tip_radius =  5.0000E-05


[gas]
    # Whether the gas dynamics are simulated:
    dynamics = f


[input_data]
    # Input file with transport (and reaction) data:
    file = '../../transport_data/humid_air_2water_v1.txt'

    # Use old style transport data (alpha, eta, mu, D vs V/m):
    old_style = F

    # List of ion mobilities (m^2/Vs):
    # ion_mobilities = 2.2e-4 2.2e-4 2.2e-4 2.2e-4 -2.2e-4 -2.2e-4 -2.2e-4

    # List of ions that are considered mobile:
    # mobile_ions = N2_plus O2_plus N4_plus O4_plus O2_min O_min O3_min

[output]
    # The timestep for writing output (s):
    dt =  5.0000E-10

    # Name for the output files (e.g. output/my_sim):
    name = humidAir/2water

# Factor which is multiplied with output_dt resulting in an output_dt when applied voltage is 0.:
# output_dt_interpulse_fac =  5.0000E+01

# Whether the domain is periodic (per dimension):
periodic = F F

[photoi]
    # Whether photoionization is enabled:
    enabled = T

    # Which photoionization method to use (helmholtz, montecarlo):
    method = 'helmholtz'

    # Update photoionization every N time step:
    per_steps = 4

# Ensure grid spacing around electrode is less than this value:
refine_electrode_dx =  2.0000E-06


# Whether to include an electrode:
use_electrode = T

# # Whether the defined electrode voltage is used instead of the field amplitude.:
# use_electrode_voltage = T

# Whether end_time is used to end the simulation:
use_end_time = T

# Variables below have default values

# The number of grid cells per coordinate in a box:
box_size = 8

# Only derefine if grid spacing if smaller than this value:
derefine_dx =  1.0000E-04

# Small density for the chemistry time step:
dt_chemistry_nmin =  1.0000E+15

# The minimum timestep (s):
dt_min =  1.0000E-15

# Safety factor for the time step:
dt_safety_factor =  9.0000E-01

# BC used for electron: standard (means using bc_species variable), dirichlet_custom, neuman_custom.:
# electron_bc = 'standard'

# Streamer length at which the simulation will end.:
end_streamer_length =  1.5000E-02

# Type of boundary condition to use (homogeneous, ...):
field_bc_type = 'homogeneous'

[fixes]
    # Disable diffusion parallel to fields above this threshold (V/m):
    diffusion_field_limit =  1.0000+100

    # Enable flux limiting, but prevent field from exceeding this value:
    drt_max_field =  1.0000+100

    # Correction used for computing cell-centered fields (none, divE, harmonic):
    field_correction = 'none'

    # Limit velocities to this value (m/s):
    max_velocity = -1.0000E+00

    # Use source factor to prevent unphysical effects due to diffusion:
    source_factor = 'none'

    # Minimal density for including electron sources:
    source_min_density = -1.0000E+10

    # Whether to write the source factor to the output:
    write_source_factor = F

[gas]
    # Gas component names:
    components = 'N2' 'O2'

    # The gas pressure (bar):
    pressure =  1.0

    # Gas component fractions:
    #fractions = 0.784 0.196 0.02 
    fractions = 0.8 0.2 

    # Gas mean molecular weight (kg), for gas dynamics:
    molecular_weight =  4.7824E-26


# Number of simulation steps to wait before initializing "the starting position of the streamer:
initial_streamer_pos_steps_wait = 5

# Memory limit (GB):
memory_limit_GB = 8

[output]
    # Output the conductivity of the plasma:
    conductivity = F

    # Show the electron energy in eV from the local field approximation:
    electron_energy = F

    # Print status every this many seconds:
    status_delay =  10

[photoi]
    # Whether photoionization is enabled in gas:
    enabled_ingas = T

    # Photoionization efficiency factor, typically around 0.05-0.1:
    eta =  5.0000E-02

    # How to compute the photoi. source (Zheleznyak, from_species):
    source_type = 'Zheleznyak'

[photoi_helmh]
    # Can be Luque (default), Bourdon-2, Bourdon-3 or custom:
    author = 'Bourdon-3'

    # Maximum residual relative to max(|rhs|):
    max_rel_residual =  1.0000E-02

# # Whether to limit plasma reactions to a certain region:
# plasma_region_enabled = F

# # Limit plasma reactions to coordinates between rmin and rmax:
# plasma_region_rmax =  1.0000+100  1.0000+100

# # Limit plasma reactions to coordinates between rmin and rmax:
# plasma_region_rmin = -1.0000+100 -1.0000+100

# Density prolongation method (limit, linear, linear_cons, sparse):
prolong_density = 'limit'

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  1.0000E+00

# The refinement buffer width in cells (around flagged cells):
refine_buffer_width = 4

# Refine if the curvature in phi is larger than this value:
refine_cphi =  1.0000E+99

# Refine until dx is smaller than this factor times the seed width:
refine_init_fac =  2.5000E-01

# Refine around initial conditions up to this time:
refine_init_time =  1.0000E-08

# Refine regions at most up to this grid spacing:
refine_limits_dr =  1.0000E+99

# Maximum coordinate of the refinement limits:
refine_limits_rmax =  0.0000E+00  0.0000E+00

# Minimum coordinate of the refinement limits:
refine_limits_rmin =  0.0000E+00  0.0000E+00

# The grid spacing will always be smaller than this value:
refine_max_dx =  6.4000E-04

# Minimum electron density for adding grid refinement:
refine_min_dens = -1.0000E+99

# The grid spacing will always be larger than this value:
refine_min_dx =  1.0000E-06

# The number of steps after which the mesh is updated:
refine_per_steps = 2

# Refine regions up to this grid spacing:
refine_regions_dr =  1.0000E+99

# Maximum coordinate of the refinement regions:
refine_regions_rmax =  0.0000E+00  0.0000E+00

# Minimum coordinate of the refinement regions:
refine_regions_rmin =  0.0000E+00  0.0000E+00

# Refine regions up to this simulation time:
refine_regions_tstop =  1.0000E+99

# If set, restart simulation from a previous .dat file:
restart_from_file = 'UNDEFINED'

# Seed for random numbers; if all zero, generate randomly:
rng_seed = 8123 91234 12399 293434

[silo]
    # Write silo output files every N outputs:
    per_outputs = 1

# Write silo output:
silo_write = T

# Boundary condition for the plasma species:
species_boundary_condition = 'neumann_zero'

# Time after which the applied field is turned off.:
# t_field_off = -1.0000E+00

[table_data]
    # Input interpolation method (linear, cubic_spline):
    input_interpolation = 'linear'

    # Maximal field (in Td) for the rate coeff. lookup table:
    max_townsend =  1.0000E+03

    # Minimal field (in Td) for the rate coeff. lookup table:
    min_townsend =  0.0000E+00

    # Size of the lookup table for reaction rates:
    size = 1000

    xspacing="linear"

# Time integrator (forward_euler, heuns_method):
time_integrator = 'heuns_method'

