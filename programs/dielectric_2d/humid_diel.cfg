# Add electrode with the following settings
use_electrode = T

# Type of electrode:
field_electrode_type = 'rod_cone_top'

# Ensure grid spacing around electrode is less than this value:
refine_electrode_dx =  1.0000E-05

# Whether the electrode is grounded or at the applied voltage:
field_electrode_grounded = F

# The size of the coarse grid:
coarse_grid_size = 32 32

# Electrode relative end position for the cone part:
field_rod_r0 =  0.0  0.9

# Electrode relative end position for the rod part / start position for the cone part:
field_rod_r1 =  0.0  0.920

# Electrode relative start position for the rod part:
field_rod_r2 =  0.0  1.0

# Radius (in m) for the rod part:
field_rod_radius =  0.5E-03

# Radius (in m) for the cone tip:
field_tip_radius =  0.180-03

# The background ion and electron density (1/m3):
background_density =  0.0000E+00

# The number of grid cells per coordinate in a box:
box_size = 8

# The size of the coarse grid:
coarse_grid_size = 32 32

# Whether cylindrical coordinates are used (only in 2D):
cylindrical = T

[dielectric]
    # Secondary electron emission coefficient for positive ion impact:
    gamma_se_ion =  1.0000E-01

    # Secondary electron emission coefficient for high energy photons:
    gamma_se_ph_highenergy =  1.0000E-01

    # Secondary electron emission coefficient for low energy photons:
    gamma_se_ph_lowenergy =  1.0000E-01

# The dielectric permittivity:
dielectric_eps =  8.0000E+00

# What kind of dielectric to use:
dielectric_type = 'bottom'

# The length of the domain (m):
domain_len =  3.0000E-02  3.0000E-02

# The maximum timestep (s):
dt_max =  1.0000E-11

# The desired endtime (s) of the simulation:
end_time =  25.000E-09

# The (initial) vertical applied electric field (V/m):
field_amplitude = -1.6000E+06

[fixes]
    # Disable diffusion parallel to fields above this threshold (V/m):
    diffusion_field_limit =  1.0000+100

    # Avoid dielectric relaxation time step constraint by limiting flux:
    #drt_limit_flux = t

    # Limit velocities to this value (m/s):
    max_velocity = -1.0000E+00

    # Use source factor to prevent unphysical effects due to diffusion:
    source_factor = "flux_hmean"

    # Minimal density for including electron sources:
    source_min_density = -1.0000E+10

[gas]
    # Gas component names:
    components = 'N2' 'O2'

    # Gas component fractions:
    fractions =  8.0000E-01  2.0000E-01

    # The gas pressure (bar):
    pressure =  1.0000E+00

[input_data]
    # Input file with transport (and reaction) data:
    #file = '../../transport_data/Dry_air_chemistry.txt'
    file = '../../transport_data/98air_2water_chemistry.txt'

    # List of ion mobilities (m^2/Vs) at 1 bar, 300 K:
    ion_mobilities =  2.0000E-04

    # Secondary electron emission yield for positive ions:
    ion_se_yield =  1.0000E-03

    # List of ions that are considered mobile:
    mobile_ions = 'O2_plus'

    # Use old style transport data (alpha, eta, mu, D vs V/m):
    old_style = F

[output]
    # The timestep for writing output (s):
    dt =  1.0000E-10

    # Name for the output files (e.g. output/my_sim):
    name = 'output/humid_diel'

[photoi]
    # Whether photoionization is enabled:
    enabled = T

    # Which photoionization method to use (helmholtz, montecarlo):
    method = 'montecarlo'

[photoi_mc]
    # At which grid spacing photons are absorbed compared to their mean distance:
    absorp_fac =  1.0000E-10

# Density prolongation method (limit, linear, linear_cons, sparse):
prolong_density = 'limit'

# Type of seed: neutral (0), ions (1) or electrons (-1):
seed_charge_type = 0

# Initial density of the seed (1/m3):
seed_density =  1.000E+18

# Fall-off type for seed (sigmoid, gaussian, smoothstep, step, laser):
seed_falloff = 'gaussian'

# The relative start position of the initial seed:
seed_rel_r0 =  0.0000E+00  8.9000E-01

# The relative end position of the initial seed:
seed_rel_r1 =  0.0000E+00  8.0000E-01

# Seed width (m):
seed_width =  0.3500E-03

[table_data]
    # Maximal field (in Td) for the rate coeff. lookup table:
    max_townsend =  1.2426E+03

# Whether a dielectric is used (experimental):
use_dielectric = T

# Variables below have default values

[circuit]
    # Get initial voltage (and capacitor charge) from applied field:
    V0_from_field = T

    # Capacities (farad):
    capacitors =  2.0000E-10

    # Initial charge on capacitors (Coulomb):
    capacitors_q =  0.0000E+00

    # Resistances (Ohm):
    resistors =  3.0000E+02

    # Type of external circuit:
    type = 'UNDEFINED'

# Whether to compute the deposited power density:
compute_power_density = F

[cross]
    # Use this many points for cross-section data:
    npoints = 500

    # Integrate up to this r value:
    rmax =  2.0000E-03

    # Write integral over cross-section data output:
    write = F

[datfile]
    # Write binary output files every N outputs:
    per_outputs = 1

    # Write binary output files (to resume later):
    write = F

# Allow derefinement if the curvature in phi is smaller than this value:
derefine_cphi =  1.0000E+99

# Only derefine if grid spacing if smaller than this value:
derefine_dx =  1.0000E-04

[dielectric]
    # Maximum travel distance for testing boundary intersection:
    photon_step_length =  1.0000E-03

    # Assume photons are not absorbed for photoemission computation:
    photons_no_absorption = F

    # preset nonuniform surface charge:
    preset_charge =  0.0000E+00

    # The distribution of nonuniform surface charge:
    preset_charge_distribution =  0.0000E+00

# The origin of the domain (m):
domain_origin =  0.0000E+00  0.0000E+00

# Small density for the chemistry time step:
dt_chemistry_nmin =  1.0000E+15

# The minimum timestep (s):
dt_min =  1.0000E-14

# Safety factor for the time step:
dt_safety_factor =  9.0000E-01

# Streamer length at which the simulation will end.:
end_streamer_length =  1.5000E-02

# Type of boundary condition to use (homogeneous, ...):
field_bc_type = 'homogeneous'

# Decay time of field (s):
field_decay_time =  1.7977+308

# Whether the electrode is grounded or at the applied voltage:
field_electrode_grounded = F


# Linear derivative of field [V/(ms)]:
field_lin_deriv =  0.0000E+00

[field_maxima]
    # Minimal distance (m) between electric field maxima:
    distance =  0.0000E+00

    # Threshold value (V/m) for electric field maxima:
    threshold =  0.0000E+00

    # Output electric field maxima and their locations:
    write = F

# Modify electric field after this time (s):
field_mod_t0 =  1.0000E+99

# Modify electric field up to this time (s):
field_mod_t1 =  1.0000E+99

# Charge (in C) of point charge:
field_point_charge =  0.0000E+00

# Relative position of point charge (outside domain):
field_point_r0 =  0.0000E+00 -1.0000E+00

# Linear rise time of field (s):
field_rise_time =  0.0000E+00


# Amplitude of sinusoidal modification (V/m):
field_sin_amplitude =  0.0000E+00

# Frequency of sinusoidal modification (Hz):
field_sin_freq =  0.0000E+00

# If true, enable mode to search stability field:
field_stability_search = F

# Use location of maximal field if above this threshold (V/m):
field_stability_threshold =  3.0000E+06

# At this relative position the background field will be zero:
field_stability_zmax =  1.0000E+00

# Start lowering background field above this relative position:
field_stability_zmin =  2.0000E-01

# File containing applied electric field (V/m) versus time:
field_table = 'UNDEFINED'


[gas]
    # Whether the gas dynamics are simulated:
    dynamics = F

    # Joule heating efficiency (between 0.0 and 1.0):
    heating_efficiency =  1.0000E+00

    # Gas mean molecular weight (kg), for gas dynamics:
    molecular_weight =  4.7824E-26

    # The gas temperature (Kelvin):
    temperature =  3.0000E+02

# Number of simulation steps to wait before initializing "the starting position of the streamer:
initial_streamer_pos_steps_wait = 5

[input_data]
    # Whether to scale reactions proportional to mu_bulk/mu:
    bulk_scale_reactions = F

    # Whether to use bulk transport coefficients (mu, D):
    bulk_transport = F

[lineout]
    # Write output along a line:
    write = F

# Memory limit (GB):
memory_limit_GB =  1.6000E+01

# Stop multigrid when residual is smaller than this factor times max(|rhs|):
multigrid_max_rel_residual =  1.0000E-04

# Number of V-cycles to perform per time step:
multigrid_num_vcycles = 2

[output]

    # Electron density threshold (1/m3, will be scaled by N):
    density_threshold =  1.0000E+18

    # Show the electron energy in eV from the local field approximation:
    electron_energy = F

    # If defined, only output these variables:
    only =

    # Write to a log file for regression testing:
    regression_test = F

    # If positive: decay time for source term (s) for time-averaged values:
    src_decay_time = -1.0000E+00

    # Include ionization source term in output:
    src_term = F

    # Print status every this many seconds:
    status_delay =  6.0000E+01

# Whether the domain is periodic (per dimension):
periodic = F F

[photoe]
    # Whether photoemission is enabled:
    enabled = f

    # Update photoemission every N time step:
    per_steps = 10

[photoi]
    # Whether photoionization is enabled in gas:
    enabled_ingas = T

    # Photoionization efficiency factor, typically around 0.05-0.1:
    eta =  5.0000E-02

    # Which excited species to use when photoi%source_type = from_species:
    excited_species = 'UNDEFINED'

    # Update photoionization every N time step:
    per_steps = 1

    # Photoemission time delay in case photoi_source_type is 'from_species':
    photoemission_time =  0.0000E+00

    # Photoionization quenching pressure (bar):
    quenching_pressure =  4.0000E-02

    # How to compute the photoi. source (Zheleznyak, from_species):
    source_type = 'Zheleznyak'

[photoi_helmh]
    # Can be Luque (default), Bourdon-2, Bourdon-3 or custom:
    author = 'Bourdon-3'

    # Weights corresponding to the lambdas; unit 1/(m bar)^2:
    coeffs =

    # Lambdas to use in Helmholtz eq; unit 1/(m bar):
    lambdas =

    # Maximum residual relative to max(|rhs|):
    max_rel_residual =  1.0000E-02

[photoi_mc]
    # Whether a constant grid spacing is used for photoionization:
    const_dx = T

    # Minimum grid spacing for photoionization:
    min_dx =  1.0000E-09

    # Maximum number of discrete photons to use:
    num_photons = 100000

    # Whether physical photons are used:
    physical_photons = T

[plane]
    # Write uniform output in a plane:
    write = F

# Refine if alpha*dx is larger than this value:
refine_adx =  1.0000E+00

# For refinement, use alpha(f * E)/f, where f is this factor:
refine_adx_fac =  1.0000E+00

# The refinement buffer width in cells (around flagged cells):
refine_buffer_width = 2

# Refine if the curvature in phi is larger than this value:
refine_cphi =  1.0000E+99

# Ensure grid spacing around electrode is less than this value:
refine_electrode_dx =  1.0000E+99

# Refine until dx is smaller than this factor times the seed width:
refine_init_fac =  2.5000E-01

# Refine around initial conditions up to this time:
refine_init_time =  1.0000E-08

# Refine regions at most up to this grid spacing:
refine_limits_dr =  1.0000E+99

# Maximum coordinate of the refinement limits:
refine_limits_rmax =  0.0000E+00  0.0000E+00

# Minimum coordinate of the refinement limits:
refine_limits_rmin =  0.0000E+00  0.0000E+00

# The grid spacing will always be smaller than this value:
refine_max_dx =  2.0000E-03

# Minimum electron density for adding grid refinement:
refine_min_dens = -1.0000E+99

# The grid spacing will always be larger than this value:
refine_min_dx =  2.0000E-06

# The number of steps after which the mesh is updated:
refine_per_steps = 2

# Refine regions up to this grid spacing:
refine_regions_dr =  1.0000E+99

# Maximum coordinate of the refinement regions:
refine_regions_rmax =  5.0000E-03  0.0000E+00

# Minimum coordinate of the refinement regions:
refine_regions_rmin =  15.0000E-03 20.0000E-03

# Refine regions up to this simulation time:
refine_regions_tstop =  1.0000E+99

# If set, restart simulation from a previous .dat file:
restart_from_file = 'UNDEFINED'

# Seed for random numbers; if all zero, generate randomly:
rng_seed = 8123 91234 12399 293434

# Names of custom species for the first seed:
seed1_species =

# Initial density of the seed at other endpoint (1/m3):
seed_density2 =  1.0000E+18

[silo]
    # Write silo output files every N outputs:
    per_outputs = 1

# Write silo output:
silo_write = T

# Boundary condition for the plasma species:
species_boundary_condition = 'neumann_zero'

# Stochastic background density (1/m3):
stochastic_density =  0.0000E+00

[table_data]
    # Input interpolation method (linear, cubic_spline):
    input_interpolation = 'linear'

    # Minimal field (in Td) for the rate coeff. lookup table:
    min_townsend =  0.0000E+00

    # Size of the lookup table for reaction rates:
    size = 1000

# Time integrator (forward_euler, heuns_method):
time_integrator = 'heuns_method'

# Whether the length of the streamer is used to end the simulation:
use_end_streamer_length = F

# Whether end_time is used to end the simulation:
use_end_time = T

